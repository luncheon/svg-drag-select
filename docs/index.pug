doctype html
html
  head
    meta(charset="utf-8")
    meta(http-equiv="X-UA-Compatible" content="IE=edge")
    meta(name="viewport" content="width=device-width, initial-scale=1.0")
    title= name
    script(async src="https://www.googletagmanager.com/gtag/js?id=UA-64398169-1")
    script window.dataLayer=window.dataLayer||[];function gtag(){dataLayer.push(arguments)}gtag('js',new Date());gtag('config','UA-64398169-1');
    link(rel="preconnect" href="https://fonts.gstatic.com/" crossorigin)
    link(rel="stylesheet" href="https://fonts.googleapis.com/css?family=Comfortaa|Roboto:300")
    link(rel="preload" as="script" href="https://www.google-analytics.com/analytics.js")
    style.
      * { margin: 0; box-sizing: border-box; }
      html, body { height: 100%; }
      body { font-family: Roboto,sans-serif; font-weight: 300; overscroll-behavior: contain; }
      header {
        position: fixed;
        left: 0;
        top: 0;
        right: 0;
        white-space: nowrap;
        padding: .5em 1em;
        background-color: white;
        box-shadow: 0 3px 3px gray;
      }
      h1 {
        display: flex;
        align-items: center;
        font-family: Comfortaa;
        font-weight: 400;
        font-size: 2.5rem;
      }
      p { margin: .5em 0; }
      a, label {
        display: inline-flex;
        align-items: center;
        user-select: none;
      }
      label { margin-right: 1em; }
      label, label > input { cursor: pointer; }
      #selected-items {
        position: fixed;
        margin-top: 1.5em;
        right: 1.5em;
        bottom: 1.5em;
        width: 8rem;
        background-color: rgba(255,255,255,.8);
      }
      main {
        width: fit-content;
        padding-right: 10rem;
      }
      svg {
        width: 150vw;
        height: 75vw;
        visibility: hidden;
      }
      path { fill: #ddd; stroke: #888; }
      path[data-selected] { fill: #f84f79; }
      .svg-drag-select-area-overlay {
        border: 1px dotted gray;
        background-color: rgba(255,255,255,.4)
      }
  body
    header
      h1
        | #{name}
        a(href=`https://github.com/luncheon/${name}`)
          img(src="https://cdn.jsdelivr.net/npm/octicons@7.0.1/build/svg/mark-github.svg" alt="GitHub" style="width: 2.5rem; height: 2.5rem; margin-left: 1rem; vertical-align: bottom;")
        div(style="flex: auto")
      p= description
      label
        input(type="radio" name="selector" value="enclosure" checked onchange="svgDragSelectOptions.selector = 'enclosure'")
        | &nbsp;enclosure
      label
        input(type="radio" name="selector" value="intersection")
        | &nbsp;intersection
      label
        input(type="radio" name="selector" value="")
        | &nbsp;custom function (strict intersection)

    main
      //- https://simplemaps.com/resources/svg-world
      include ./world.svg

    textarea#selected-items(disabled rows="10")

    script.
      addEventListener('load', function () {
        const headerHeight = document.getElementsByTagName('header')[0].offsetHeight
        document.getElementsByTagName('main')[0].style.marginTop = headerHeight + 'px'
        document.getElementById('selected-items').style.top = headerHeight + 'px'
      })
    //- script(src=`https://cdn.jsdelivr.net/npm/${name}@${version}`)
    script(src="index.min.js")
    script.
      function strictIntersectionSelector(context) {
        const dragAreaInSvgCoordinate = context.dragAreaInSvgCoordinate
        return context.getIntersections().filter(function (element) {
          if (context.pointerEvent.target === element) {
            return true
          }
          if (!(element instanceof SVGPathElement)) {
            // strictly check only <path>s.
            return true
          }
          for (let i = 0, len = element.getTotalLength(); i <= len; i += 4 /* arbitrary */) {
            const point = element.getPointAtLength(i)
            const x = point.x
            const y = point.y
            if (
                dragAreaInSvgCoordinate.x <= x && x <= dragAreaInSvgCoordinate.x + dragAreaInSvgCoordinate.width &&
                dragAreaInSvgCoordinate.y <= y && y <= dragAreaInSvgCoordinate.y + dragAreaInSvgCoordinate.height
            ) {
              return true
            }
          }
          return false
        })
      }

      window.svgDragSelectOptions = {
        svg: document.getElementsByTagName('svg')[0],
        onSelectionStart: function (selectionStart) {
          console.log("onSelectionStart", selectionStart)
          const selectedElements = selectionStart.svg.querySelectorAll('[data-selected]')
          for (let i = 0; i < selectedElements.length; i++) {
            selectedElements[i].removeAttribute('data-selected')
          }
          document.getElementById('selected-items').value = ''
        },
        onSelectionEnd: function (selectionEnd) {
          console.log("onSelectionEnd", selectionEnd)
        },
        onSelectionChange: function (selectionChange) {
          console.log("onSelectionChange", selectionChange)
          selectionChange.newlyDeselectedElements.forEach(function (element) {
            element.removeAttribute('data-selected')
          })
          selectionChange.newlySelectedElements.forEach(function (element) {
            element.setAttribute('data-selected', '')
          })
          document.getElementById('selected-items').value = selectionChange.selectedElements
            .map(function (element) { return element.getAttribute('data-name') })
            .sort()
            .join('\n')
        },
      }
      Object.defineProperty(svgDragSelectOptions, 'selector', {
        get: function () {
          return document.querySelector('input[name=selector]:checked').value || strictIntersectionSelector
        }
      })
      svgDragSelect(svgDragSelectOptions)
      svgDragSelectOptions.svg.style.visibility = 'visible'
